name: Reusable NPM Publish

on:
  workflow_call:
    inputs:
      package_name:
        description: "Full scoped package name, e.g. @theoliverlear/styles-suite"
        required: true
        type: string
      package_dir:
        description: "Directory containing the package"
        required: true
        type: string
      build_command:
        description: "Build command (empty to skip)"
        required: false
        default: ""
        type: string
      dist_dir:
        description: "Directory to publish from ('' = package_dir)"
        required: false
        default: ""
        type: string
      registry_url:
        description: "Registry URL"
        required: false
        default: "https://npm.pkg.github.com"
        type: string
      scope:
        description: "NPM scope"
        required: false
        default: "@theoliverlear"
        type: string
      verify_files:
        description: "Space-separated files to verify"
        required: false
        default: "package.json"
        type: string
      install_command:
        description: "Install command"
        required: false
        default: "npm ci || npm i"
        type: string
      skip_if_exists:
        description: "Skip publish if same version exists"
        required: false
        default: "true"
        type: string
    secrets:
      NODE_AUTH_TOKEN:
        required: true

permissions: inherit

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: ${{ inputs.registry_url }}
          scope: ${{ inputs.scope }}

      - name: Configure auth for GitHub Packages
        if: ${{ inputs.registry_url == 'https://npm.pkg.github.com' }}
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> ~/.npmrc

      - name: Verify files
        working-directory: ${{ inputs.package_dir }}
        shell: bash
        run: |
          set -euo pipefail
          for required_file in ${{ inputs.verify_files }}; do
            test -f "$required_file" || { echo "Missing $required_file"; exit 1; }
          done

      - name: Install
        working-directory: ${{ inputs.package_dir }}
        shell: bash
        run: ${{ inputs.install_command }}

      - name: Build (optional)
        if: ${{ inputs.build_command != '' }}
        working-directory: ${{ inputs.package_dir }}
        shell: bash
        run: ${{ inputs.build_command }}

      - name: Determine publish directory
        id: pubdir
        working-directory: ${{ inputs.package_dir }}
        shell: bash
        run: |
          set -euo pipefail
          publish_dir="."
          if [[ -n "${{ inputs.dist_dir }}" ]]; then
            publish_dir="${{ inputs.dist_dir }}"
          fi
          test -f "${publish_dir}/package.json" || { echo "No package.json in ${publish_dir}"; exit 1; }
          echo "dir=${publish_dir}" >> "$GITHUB_OUTPUT"

      - name: Check existing version
        id: exists
        if: ${{ inputs.skip_if_exists == 'true' }}
        working-directory: ${{ inputs.package_dir }}
        shell: bash
        run: |
          set -euo pipefail
          pkg="${{ inputs.package_name }}"
          version=$(node -e "console.log(require('./package.json').version)")
          echo "Local version: ${version}"
          if npm view "${pkg}@${version}" version >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Version ${version} of ${pkg} exists. Skipping."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish
        if: ${{ inputs.skip_if_exists != 'true' || steps.exists.outputs.exists == 'false' }}
        working-directory: ${{ inputs.package_dir }}/${{ steps.pubdir.outputs.dir }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        shell: bash
        run: npm publish

      - name: Output info
        if: ${{ inputs.skip_if_exists != 'true' || steps.exists.outputs.exists == 'false' }}
        working-directory: ${{ inputs.package_dir }}/${{ steps.pubdir.outputs.dir }}
        shell: bash
        run: node -e "const p=require('./package.json'); console.log('Published', p.name+'@'+p.version)"
