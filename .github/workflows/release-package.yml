name: Reusable NPM Package Publisher

on:
  workflow_call:
    inputs:
      package_name:
        description: "Full package name (e.g., @scope/name)"
        required: true
        type: string
      package_dir:
        description: "Relative path to the package directory"
        required: true
        type: string
      node_version:
        description: "Node.js version"
        required: false
        default: '20'
        type: string
      scss_package:
        description: "Set true for SCSS-only packages (no build, ensure index.scss)"
        required: false
        default: false
        type: boolean
      build_script:
        description: "Command to build the package (ignored when scss_package=true)"
        required: false
        default: 'npm run build'
        type: string
      dist_dir:
        description: "Directory to publish from after build (relative to package_dir). If empty, publish from package_dir"
        required: false
        type: string
      registry_url:
        description: "NPM registry URL"
        required: false
        default: 'https://npm.pkg.github.com'
        type: string
      scope:
        description: "NPM scope used for setup-node (optional)"
        required: false
        default: '@theoliverlear'
        type: string

jobs:
  publish-package:
    name: Publish ${{ inputs.package_name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ${{ inputs.package_dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Configure default npm registry
        run: npm config set registry https://registry.npmjs.org

      - name: Configure scope registry for GitHub Packages
        if: ${{ contains(inputs.registry_url, 'npm.pkg.github.com') }}
        run: npm config set ${{ inputs.scope }}:registry ${{ inputs.registry_url }}

      - name: Verify package.json exists
        run: |
          test -f package.json

      - name: Verify SCSS entry (scss_package)
        if: ${{ inputs.scss_package }}
        run: |
          test -f index.scss

      - name: Configure npm auth for GitHub Packages
        if: ${{ contains(inputs.registry_url, 'npm.pkg.github.com') }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc

      - name: Check if version already published
        id: check_version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "const fs=require('fs'); const {execSync}=require('child_process'); const pkg='${{ inputs.package_name }}'; const v=require('./package.json').version; let exists=false; try{execSync('npm view '+pkg+'@'+v+' version',{stdio:'ignore'}); exists=true;}catch(e){exists=false;} const out=process.env.GITHUB_OUTPUT; if(out){fs.appendFileSync(out,'exists='+exists+'\n');} if(exists){console.log('Version '+pkg+'@'+v+' already exists on registry. Skipping.');}"

      - name: Install dependencies (generic)
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package }}
        run: |
          npm ci || npm i

      - name: Build package
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package && inputs.build_script != '' }}
        run: ${{ inputs.build_script }}

      - name: Verify dist output
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package && inputs.dist_dir != '' }}
        run: |
          test -f ${{ inputs.dist_dir }}/package.json

      - name: Publish from dist
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package && inputs.dist_dir != '' }}
        working-directory: ${{ inputs.package_dir }}/${{ inputs.dist_dir }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish

      - name: Publish from package root (non-scss)
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package && (inputs.dist_dir == '' || !inputs.dist_dir) }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish

      - name: Install (no-op for SCSS-only)
        if: ${{ steps.check_version.outputs.exists == 'false' && inputs.scss_package }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm i
          else
            npm i --ignore-scripts --no-audit --no-fund || true
          fi

      - name: Publish SCSS package
        if: ${{ steps.check_version.outputs.exists == 'false' && inputs.scss_package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish

      - name: Skip publish (already exists)
        if: steps.check_version.outputs.exists == 'true'
        run: |
          node -e "console.log('Skipped publish: ' + '${{ inputs.package_name }}' + '@' + require('./package.json').version + ' already exists')"

      - name: Output published package info (dist)
        if: ${{ steps.check_version.outputs.exists == 'false' && !inputs.scss_package && inputs.dist_dir != '' }}
        run: |
          node -e "console.log('Published ' + '${{ inputs.package_name }}' + '@' + require('./${{ inputs.dist_dir }}/package.json').version)"

      - name: Output published package info (root)
        if: ${{ steps.check_version.outputs.exists == 'false' && (inputs.scss_package || inputs.dist_dir == '' || !inputs.dist_dir) }}
        run: |
          node -e "console.log('Published ' + '${{ inputs.package_name }}' + '@' + require('./package.json').version)"