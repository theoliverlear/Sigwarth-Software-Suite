name: "NPM Publish (GH Packages)"
description: "Builds and publishes an NPM package (optionally from dist) to GitHub Packages"

inputs:
  package_name:
    description: "Full scoped package name, e.g. @theoliverlear/styles-suite"
    required: true
  package_dir:
    description: "Directory containing the package"
    required: true
  build_command:
    description: "Build command (empty to skip)"
    required: false
    default: ""
  dist_dir:
    description: "Directory to publish from ('' = package_dir)"
    required: false
    default: ""
  registry_url:
    description: "Registry URL"
    required: false
    default: "https://npm.pkg.github.com"
  scope:
    description: "NPM scope"
    required: false
    default: "@theoliverlear"
  verify_files:
    description: "Space-separated files to verify exist (relative to package_dir)"
    required: false
    default: "package.json"
  install_command:
    description: "Install command"
    required: false
    default: "npm ci || npm i"
  skip_if_exists:
    description: "Skip publish if identical version already exists"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: ${{ inputs.registry_url }}
        scope: ${{ inputs.scope }}

    - name: Configure auth for GitHub Packages
      if: ${{ inputs.registry_url == 'https://npm.pkg.github.com' }}
      shell: bash
      run: echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
      env:
        NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}

    - name: Verify files
      shell: bash
      working-directory: ${{ inputs.package_dir }}
      run: |
        set -euo pipefail
        for required_file in ${{ inputs.verify_files }}; do
          test -f "$required_file" || { echo "Missing $required_file"; exit 1; }
        done

    - name: Install
      shell: bash
      working-directory: ${{ inputs.package_dir }}
      run: ${{ inputs.install_command }}

    - name: Build (optional)
      if: ${{ inputs.build_command != '' }}
      shell: bash
      working-directory: ${{ inputs.package_dir }}
      run: ${{ inputs.build_command }}

    - name: Determine publish directory
      id: pubdir
      shell: bash
      working-directory: ${{ inputs.package_dir }}
      run: |
        set -euo pipefail
        publish_dir="."
        if [[ -n "${{ inputs.dist_dir }}" ]]; then
          publish_dir="${{ inputs.dist_dir }}"
        fi
        test -f "${publish_dir}/package.json" || { echo "No package.json in ${publish_dir}"; exit 1; }
        echo "dir=${publish_dir}" >> "$GITHUB_OUTPUT"

    - name: Check existing version
      id: exists
      if: ${{ inputs.skip_if_exists == 'true' }}
      shell: bash
      working-directory: ${{ inputs.package_dir }}
      run: |
        set -euo pipefail
        pkg="${{ inputs.package_name }}"
        version=$(node -e "console.log(require('./package.json').version)")
        echo "Local version: ${version}"
        if npm view "${pkg}@${version}" version >/dev/null 2>&1; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
          echo "Version ${version} of ${pkg} exists. Skipping."
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Publish
      if: ${{ inputs.skip_if_exists != 'true' || steps.exists.outputs.exists == 'false' }}
      shell: bash
      working-directory: ${{ inputs.package_dir }}/${{ steps.pubdir.outputs.dir }}
      env:
        NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}
      run: npm publish

    - name: Output info
      if: ${{ inputs.skip_if_exists != 'true' || steps.exists.outputs.exists == 'false' }}
      shell: bash
      working-directory: ${{ inputs.package_dir }}/${{ steps.pubdir.outputs.dir }}
      run: node -e "const p=require('./package.json'); console.log('Published', p.name+'@'+p.version)"
